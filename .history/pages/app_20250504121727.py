import streamlit as st
import torch
import torchvision.transforms as transforms
from PIL import Image
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from src.model import get_model
from src.visualization import apply_cam
import tempfile
import os
os.environ['STREAMLIT_SERVER_WATCH_DIRS'] = 'false'
import io
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors as reportlab_colors
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image as RLImage, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import matplotlib
matplotlib.use('Agg')
import uuid
from database import User, Patient, Analysis, get_db

# Thi·∫øt l·∫≠p trang
st.set_page_config(
    page_title="Ph√°t hi·ªán lao ph·ªïi qua X-quang", 
    layout="wide",
    initial_sidebar_state="collapsed",
    page_icon="ü´Å"
)

# Ki·ªÉm tra ƒëƒÉng nh·∫≠p
if "user_info" not in st.session_state:
    st.warning("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng ·ª©ng d·ª•ng")
    st.button("ƒêi ƒë·∫øn trang ƒëƒÉng nh·∫≠p", on_click=lambda: st.switch_page("auth.py"))
    st.stop()

# ƒêƒÉng k√Ω font h·ªó tr·ª£ ti·∫øng Vi·ªát
font_paths = [
    os.path.join(os.path.dirname(__file__), 'DejaVuSans.ttf'),
    os.path.join(os.path.dirname(__file__), 'fonts', 'DejaVuSans.ttf'),
    'DejaVuSans.ttf'
]

font_registered = False
for font_path in font_paths:
    if os.path.exists(font_path):
        try:
            pdfmetrics.registerFont(TTFont('DejaVuSans', font_path))
            font_registered = True
            break
        except Exception as e:
            st.warning(f"Kh√¥ng th·ªÉ ƒëƒÉng k√Ω font t·ª´ {font_path}: {e}")

if not font_registered:
    st.warning("Kh√¥ng th·ªÉ ƒëƒÉng k√Ω font DejaVuSans. S·∫Ω s·ª≠ d·ª•ng font m·∫∑c ƒë·ªãnh.")

# Import CSS t·ª´ file ri√™ng
with open('style.css') as f:
    st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

# T·∫£i m√¥ h√¨nh
@st.cache_resource
def load_model():
    model = get_model(num_classes=2)
    model.load_state_dict(torch.load('models/best_model.pth', map_location=torch.device('cpu')))
    model.eval()
    return model

# Ti·ªÅn x·ª≠ l√Ω ·∫£nh
preprocess = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
])

# T·∫°o b√°o c√°o PDF
def create_pdf_report(image, cam_image, prediction, prob_normal, prob_tb, process_time, filename=None, patient_info=None):
    buffer = io.BytesIO()
    
    # T·∫°o document PDF
    doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=72, leftMargin=72, topMargin=72, bottomMargin=72)
    
    # T·∫°o style cho vƒÉn b·∫£n
    styles = getSampleStyleSheet()
    
    # Ki·ªÉm tra xem font DejaVuSans ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω ch∆∞a
    vietnamese_font = 'DejaVuSans'
    if vietnamese_font in pdfmetrics.getRegisteredFontNames():
        styles.add(ParagraphStyle(name='Vietnamese', fontName=vietnamese_font, fontSize=12))
    else:
        # N·∫øu font kh√¥ng c√≥, s·ª≠ d·ª•ng font m·∫∑c ƒë·ªãnh
        styles.add(ParagraphStyle(name='Vietnamese', fontName='Helvetica', fontSize=12))
    
    # Danh s√°ch c√°c ph·∫ßn t·ª≠ trong PDF
    elements = []
    
    # Ti√™u ƒë·ªÅ
    title_style = styles["Heading1"]
    title_style.alignment = 1  # Center
    if vietnamese_font in pdfmetrics.getRegisteredFontNames():
        title_style.fontName = vietnamese_font
    elements.append(Paragraph("K·∫æT QU·∫¢ PH√ÇN T√çCH X-QUANG PH·ªîI", title_style))
    elements.append(Spacer(1, 20))
    
    # Ng√†y gi·ªù ph√¢n t√≠ch
    date_style = styles["Normal"]
    date_style.alignment = 1  # Center
    if vietnamese_font in pdfmetrics.getRegisteredFontNames():
        date_style.fontName = vietnamese_font
    current_time = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    elements.append(Paragraph(f"Ng√†y gi·ªù ph√¢n t√≠ch: {current_time}", date_style))
    elements.append(Spacer(1, 20))
    
    # Th√¥ng tin b·ªánh nh√¢n n·∫øu c√≥
    if patient_info:
        patient_style = styles["Heading2"]
        if vietnamese_font in pdfmetrics.getRegisteredFontNames():
            patient_style.fontName = vietnamese_font
        elements.append(Paragraph("TH√îNG TIN B·ªÜNH NH√ÇN", patient_style))
        elements.append(Spacer(1, 10))
        
        patient_data = [
            ["Th√¥ng tin", "Chi ti·∫øt"],
            ["M√£ b·ªánh nh√¢n", patient_info["patient_code"]],
            ["H·ªç v√† t√™n", patient_info["full_name"]],
            ["Tu·ªïi", str(patient_info["age"])],
            ["Gi·ªõi t√≠nh", patient_info["gender"]]
        ]
        
        if patient_info.get("address"):
            patient_data.append(["ƒê·ªãa ch·ªâ", patient_info["address"]])
        
        if patient_info.get("phone"):
            patient_data.append(["S·ªë ƒëi·ªán tho·∫°i", patient_info["phone"]])
        
        patient_table = Table(patient_data, colWidths=[200, 200])
        patient_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (1, 0), reportlab_colors.grey),
            ('TEXTCOLOR', (0, 0), (1, 0), reportlab_colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (1, 0), vietnamese_font if vietnamese_font in pdfmetrics.getRegisteredFontNames() else 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), reportlab_colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, reportlab_colors.black),
            ('FONTNAME', (0, 1), (0, -1), vietnamese_font if vietnamese_font in pdfmetrics.getRegisteredFontNames() else 'Helvetica'),
            ('FONTNAME', (1, 1), (1, -1), vietnamese_font if vietnamese_font in pdfmetrics.getRegisteredFontNames() else 'Helvetica'),
        ]))
        
        elements.append(patient_table)
        elements.append(Spacer(1, 20))
    
    if filename:
        file_style = styles["Normal"]
        if vietnamese_font in pdfmetrics.getRegisteredFontNames():
            file_style.fontName = vietnamese_font
        elements.append(Paragraph(f"T√™n file: {filename}", file_style))
        elements.append(Spacer(1, 10))
    
    # L∆∞u ·∫£nh g·ªëc v√† ·∫£nh CAM
    img_path = tempfile.mktemp(suffix='.png')
    cam_path = tempfile.mktemp(suffix='.png')
    
    # Chuy·ªÉn ƒë·ªïi ·∫£nh PIL sang ƒë·ªãnh d·∫°ng ph√π h·ª£p
    image.save(img_path)
    
    # N·∫øu cam_image l√† m·∫£ng numpy, chuy·ªÉn th√†nh PIL Image
    if isinstance(cam_image, np.ndarray):
        cam_image_pil = Image.fromarray(cam_image)
        cam_image_pil.save(cam_path)
    else:
        cam_image.save(cam_path)
    
    # Th√™m ·∫£nh v√†o PDF
    heading_style = styles["Heading2"]
    if vietnamese_font in pdfmetrics.getRegisteredFontNames():
        heading_style.fontName = vietnamese_font
    
    elements.append(Paragraph("·∫¢nh X-quang g·ªëc:", heading_style))
    elements.append(Spacer(1, 10))
    elements.append(RLImage(img_path, width=400, height=300))
    elements.append(Spacer(1, 20))
    
    elements.append(Paragraph("·∫¢nh ph√¢n t√≠ch (CAM):", heading_style))
    elements.append(Spacer(1, 10))
    elements.append(RLImage(cam_path, width=400, height=300))
    elements.append(Spacer(1, 20))
    
    # K·∫øt qu·∫£ ph√¢n t√≠ch
    elements.append(Paragraph("K·∫æT QU·∫¢ CH·∫®N ƒêO√ÅN:", heading_style))
    elements.append(Spacer(1, 10))
    
    if prediction == 1:
        result_text = "PH√ÅT HI·ªÜN D·∫§U HI·ªÜU LAO PH·ªîI"
        result_color = reportlab_colors.red
    else:
        result_text = "KH√îNG PH√ÅT HI·ªÜN D·∫§U HI·ªÜU LAO PH·ªîI"
        result_color = reportlab_colors.green
    
    result_style = ParagraphStyle(
        name='ResultStyle',
        parent=styles["Heading2"],
        textColor=result_color,
        alignment=1  # Center
    )
    if vietnamese_font in pdfmetrics.getRegisteredFontNames():
        result_style.fontName = vietnamese_font
    elements.append(Paragraph(result_text, result_style))
    elements.append(Spacer(1, 20))
    
    # Th√¥ng tin chi ti·∫øt
    data = [
        ["Th√¥ng s·ªë", "Gi√° tr·ªã"],
        ["X√°c su·∫•t b√¨nh th∆∞·ªùng", f"{prob_normal:.2%}"],
        ["X√°c su·∫•t lao ph·ªïi", f"{prob_tb:.2%}"],
        ["Th·ªùi gian x·ª≠ l√Ω", f"{process_time:.2f} gi√¢y"]
    ]

    table = Table(data, colWidths=[200, 200])

    # X√°c ƒë·ªãnh font s·∫Ω s·ª≠ d·ª•ng
    use_font = vietnamese_font if vietnamese_font in pdfmetrics.getRegisteredFontNames() else 'Helvetica'
    bold_font = vietnamese_font if vietnamese_font in pdfmetrics.getRegisteredFontNames() else 'Helvetica-Bold'

    table.setStyle(TableStyle([
        # ƒê·ªãnh d·∫°ng h√†ng ti√™u ƒë·ªÅ
        ('BACKGROUND', (0, 0), (1, 0), reportlab_colors.grey),
        ('TEXTCOLOR', (0, 0), (1, 0), reportlab_colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (1, 0), bold_font),  # Ti√™u ƒë·ªÅ s·ª≠ d·ª•ng font in ƒë·∫≠m
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        
        # ƒê·ªãnh d·∫°ng n·ªôi dung
        ('BACKGROUND', (0, 1), (-1, -1), reportlab_colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, reportlab_colors.black),
        
        # √Åp d·ª•ng font cho t·∫•t c·∫£ c√°c √¥ n·ªôi dung
        ('FONTNAME', (0, 1), (0, -1), use_font),  # C·ªôt 1 (Th√¥ng s·ªë)
        ('FONTNAME', (1, 1), (1, -1), use_font),  # C·ªôt 2 (Gi√° tr·ªã)
    ]))
    
    elements.append(table)
    elements.append(Spacer(1, 20))
    
    # Th√¥ng tin b√°c sƒ©
    if "user_info" in st.session_state:
        doctor_info = f"B√°c sƒ© ph√¢n t√≠ch: {st.session_state.user_info['full_name']}"
        elements.append(Paragraph(doctor_info, styles["Vietnamese"]))
        elements.append(Spacer(1, 10))
    
    # L∆∞u √Ω
    note_heading_style = styles["Heading3"]
    if vietnamese_font in pdfmetrics.getRegisteredFontNames():
        note_heading_style.fontName = vietnamese_font
    elements.append(Paragraph("L∆∞u √Ω:", note_heading_style))
    elements.append(Paragraph("K·∫øt qu·∫£ n√†y ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o. Vui l√≤ng tham kh·∫£o √Ω ki·∫øn c·ªßa b√°c sƒ© chuy√™n khoa ƒë·ªÉ c√≥ ch·∫©n ƒëo√°n ch√≠nh x√°c.", styles["Vietnamese"]))
    
    # X√¢y d·ª±ng PDF
    doc.build(elements)
    
    # X√≥a file t·∫°m
    os.unlink(img_path)
    os.unlink(cam_path)
    
    buffer.seek(0)
    return buffer

# L∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch v√†o database
def save_analysis_to_db(image, cam_image, prediction, prob_normal, prob_tb, process_time, filename, patient_id=None, notes=None):
    # T·∫°o th∆∞ m·ª•c l∆∞u tr·ªØ n·∫øu ch∆∞a t·ªìn t·∫°i
    os.makedirs("static/uploads", exist_ok=True)
    
    # T·∫°o t√™n file duy nh·∫•t
    unique_id = str(uuid.uuid4())
    image_filename = f"{unique_id}_original.png"
    cam_filename = f"{unique_id}_cam.png"
    
    # ƒê∆∞·ªùng d·∫´n l∆∞u tr·ªØ
    image_path = os.path.join("static/uploads", image_filename)
    cam_path = os.path.join("static/uploads", cam_filename)
    
    # L∆∞u ·∫£nh
    image.save(image_path)
    
    # N·∫øu cam_image l√† m·∫£ng numpy, chuy·ªÉn th√†nh PIL Image
    if isinstance(cam_image, np.ndarray):
        cam_image_pil = Image.fromarray(cam_image)
        cam_image_pil.save(cam_path)
    else:
        cam_image.save(cam_path)
    
    # L∆∞u v√†o database
    db = next(get_db())
    new_analysis = Analysis(
        image_path=image_path,
        cam_image_path=cam_path,
        prediction=prediction,
        probability_normal=prob_normal,
        probability_tb=prob_tb,
        process_time=process_time,
        notes=notes,
        patient_id=patient_id,
        doctor_id=st.session_state.user_info["id"]
    )
    
    db.add(new_analysis)
    db.commit()
    
    return new_analysis.id

# Header v·ªõi logo v√† ti√™u ƒë·ªÅ
st.markdown("""
<div class="header">
    <div class="logo-container">
        <img src="https://cdn-icons-png.flaticon.com/512/2966/2966327.png" class="logo">
    </div>
    <div class="title-container">
        <h1>PH√ÅT HI·ªÜN LAO PH·ªîI QUA ·∫¢NH X-QUANG</h1>
        <p class="subtitle">·ª®ng d·ª•ng tr√≠ tu·ªá nh√¢n t·∫°o trong ch·∫©n ƒëo√°n h√¨nh ·∫£nh y t·∫ø</p>
    </div>
</div>
""", unsafe_allow_html=True)

# Sidebar v·ªõi th√¥ng tin ng∆∞·ªùi d√πng
with st.sidebar:
    st.markdown(f"**Xin ch√†o, {st.session_state.user_info['full_name']}!**")
    st.markdown("---")
    
    if st.button("Qu·∫£n l√Ω b·ªánh nh√¢n"):
        st.switch_page("pages/patient_management.py")
    
    if st.session_state.user_info["is_admin"] and st.button("Trang qu·∫£n tr·ªã"):
        st.switch_page("pages/admin.py")
    
    st.markdown("---")
    if st.button("ƒêƒÉng xu·∫•t"):
        del st.session_state.user_info
        st.switch_page("auth.py")

# T·∫£i m√¥ h√¨nh
try:
    with st.spinner("ƒêang t·∫£i m√¥ h√¨nh AI..."):
        model = load_model()
        last_conv_layer = model.layer4[-1]
    st.success("‚úÖ M√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!")
except Exception as e:
    st.error(f"‚ùå Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh: {e}")
    st.stop()

# T·∫°o tabs v·ªõi thi·∫øt k·∫ø m·ªõi
tabs = st.tabs([
    "üîç Ph√¢n t√≠ch m·ªôt ·∫£nh", 
    "üìä Ph√¢n t√≠ch nhi·ªÅu ·∫£nh",
    "‚ÑπÔ∏è Th√¥ng tin"
])

with tabs[0]:
    st.markdown("""
    <div class="tab-description">
        T·∫£i l√™n m·ªôt ·∫£nh X-quang ph·ªïi ƒë·ªÉ ph√¢n t√≠ch v√† ph√°t hi·ªán d·∫•u hi·ªáu lao ph·ªïi.
    </div>
    """, unsafe_allow_html=True)
    
    # Ch·ªçn b·ªánh nh√¢n (n·∫øu c√≥)
    db = next(get_db())
    
    if st.session_state.user_info["is_admin"]:
        # Admin c√≥ th·ªÉ xem t·∫•t c·∫£ b·ªánh nh√¢n
        patients = db.query(Patient).all()
    else:
        # B√°c sƒ© ch·ªâ xem b·ªánh nh√¢n c·ªßa m√¨nh
        patients = db.query(Patient).filter(Patient.doctor_id == st.session_state.user_info["id"]).all()
    
    patient_options = [("none", "Kh√¥ng ch·ªçn b·ªánh nh√¢n")] + [(str(p.id), f"{p.patient_code} - {p.full_name}") for p in patients]
    
    # N·∫øu c√≥ b·ªánh nh√¢n ƒë∆∞·ª£c ch·ªçn t·ª´ trang qu·∫£n l√Ω b·ªánh nh√¢n
    selected_patient_id = None
    if "selected_patient_id" in st.session_state:
        selected_patient_id = st.session_state.selected_patient_id
        # X√≥a kh·ªèi session state ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng l·∫ßn sau
        del st.session_state.selected_patient_id
    
    selected_patient = st.selectbox(
        "Ch·ªçn b·ªánh nh√¢n (kh√¥ng b·∫Øt bu·ªôc):",
        options=[id for id, _ in patient_options],
        format_func=lambda x: next((name for id, name in patient_options if id == x), ""),
        index=next((i for i, (id, _) in enumerate(patient_options) if id == str(selected_patient_id)), 0) if selected_patient_id else 0
    )
    
    patient_info = None
    if selected_patient != "none":
        patient = db.query(Patient).filter(Patient.id == int(selected_patient)).first()
        if patient:
            patient_info = {
                "id": patient.id,
                "patient_code": patient.patient_code,
                "full_name": patient.full_name,
                "age": patient.age,
                "gender": patient.gender,
                "address": patient.address,
                "phone": patient.phone
            }
            
            st.markdown(f"""
            <div class="info-card">
                <div class="info-card-header">Th√¥ng tin b·ªánh nh√¢n</div>
                <div class="info-card-content">
                    <div class="info-item">
                        <div class="info-label">M√£ b·ªánh nh√¢n:</div>
                        <div class="info-value">{patient.patient_code}</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">H·ªç v√† t√™n:</div>
                        <div class="info-value">{patient.full_name}</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Tu·ªïi:</div>
                        <div class="info-value">{patient.age}</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Gi·ªõi t√≠nh:</div>
                        <div class="info-value">{patient.gender}</div>
                    </div>
                </div>
            </div>
            """, unsafe_allow_html=True)
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.markdown('<div class="section-header">T·∫£i l√™n ·∫£nh X-quang ph·ªïi</div>', unsafe_allow_html=True)
        
        upload_placeholder = st.empty()
        with upload_placeholder.container():
            uploaded_file = st.file_uploader(
                "K√©o th·∫£ ho·∫∑c nh·∫•p ƒë·ªÉ ch·ªçn ·∫£nh X-quang", 
                type=["jpg", "jpeg", "png"], 
                key="single_upload",
                help="H·ªó tr·ª£ c√°c ƒë·ªãnh d·∫°ng: JPG, JPEG, PNG"
            )
        
        if uploaded_file:
            # Hi·ªÉn th·ªã ·∫£nh g·ªëc trong khung ƒë·∫πp h∆°n
            image = Image.open(uploaded_file).convert('RGB')
            st.markdown('<div class="image-container">', unsafe_allow_html=True)
            st.image(image, use_container_width=True)
            st.markdown('</div>', unsafe_allow_html=True)
            st.markdown(f'<div class="image-caption">·∫¢nh: {uploaded_file.name}</div>', unsafe_allow_html=True)
            
            # Ghi ch√∫ (kh√¥ng b·∫Øt bu·ªôc)
            notes = st.text_area("Ghi ch√∫ (kh√¥ng b·∫Øt bu·ªôc):", height=100)
            
            col1_buttons = st.columns(2)
            with col1_buttons[0]:
                analyze_button = st.button("üîç Ph√¢n t√≠ch ·∫£nh", key="analyze_single", use_container_width=True)
            with col1_buttons[1]:
                reset_button = st.button("üîÑ L√†m m·ªõi", key="reset_single", use_container_width=True)
            
            if reset_button:
                st.session_state.needs_rerun = True
            
            if analyze_button:
                with st.spinner("‚è≥ ƒêang ph√¢n t√≠ch ·∫£nh..."):
                    # L∆∞u ·∫£nh t·∫°m th·ªùi
                    temp_dir = tempfile.mkdtemp()
                    temp_file_path = os.path.join(temp_dir, uploaded_file.name)
                    image.save(temp_file_path)
                    
                    # Ph√¢n t√≠ch ·∫£nh
                    cam_image, prediction, prob_normal, prob_tb, process_time = apply_cam(
                        temp_file_path, model, preprocess, last_conv_layer)
                    
                    # L∆∞u k·∫øt qu·∫£ v√†o database
                    patient_id = int(selected_patient) if selected_patient != "none" else None
                    analysis_id = save_analysis_to_db(
                        image, cam_image, prediction, prob_normal, prob_tb, process_time, 
                        uploaded_file.name, patient_id, notes
                    )
                    
                    with col2:
                        st.markdown('<div class="section-header">K·∫øt qu·∫£ ph√¢n t√≠ch</div>', unsafe_allow_html=True)
                        
                        # Hi·ªÉn th·ªã k·∫øt qu·∫£ v·ªõi thi·∫øt k·∫ø ƒë·∫πp h∆°n
                        if prediction == 1:
                            st.markdown("""
                            <div class="result-card tb">
                                <div class="result-icon">‚ö†Ô∏è</div>
                                <div class="result-text">Ph√°t hi·ªán d·∫•u hi·ªáu lao ph·ªïi</div>
                            </div>
                            """, unsafe_allow_html=True)
                        else:
                            st.markdown("""
                            <div class="result-card normal">
                                <div class="result-icon">‚úÖ</div>
                                <div class="result-text">Kh√¥ng ph√°t hi·ªán d·∫•u hi·ªáu lao ph·ªïi</div>
                            </div>
                            """, unsafe_allow_html=True)
                        
                        # Hi·ªÉn th·ªã ·∫£nh CAM
                        st.markdown('<div class="image-container">', unsafe_allow_html=True)
                        st.image(cam_image, use_container_width=True)
                        st.markdown('</div>', unsafe_allow_html=True)
                        st.markdown('<div class="image-caption">V√πng ph√¢n t√≠ch (CAM)</div>', unsafe_allow_html=True)
                        
                        # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt trong card
                        st.markdown("""
                        <div class="info-card">
                            <div class="info-card-header">Th√¥ng tin chi ti·∫øt</div>
                            <div class="info-card-content">
                        """, unsafe_allow_html=True)
                        
                        # T·∫°o bi·ªÉu ƒë·ªì x√°c su·∫•t
                        fig, ax = plt.subplots(figsize=(8, 3))
                        labels = ['B√¨nh th∆∞·ªùng', 'Lao ph·ªïi']
                        values = [prob_normal, prob_tb]
                        colors = ['#2ecc71', '#e74c3c']
                        
                        bars = ax.bar(labels, values, color=colors)
                        ax.set_ylim(0, 1)
                        ax.set_ylabel('X√°c su·∫•t')
                        ax.set_title('Ph√¢n t√≠ch x√°c su·∫•t')
                        
                        # Th√™m nh√£n ph·∫ßn trƒÉm tr√™n m·ªói c·ªôt
                        for bar in bars:
                            height = bar.get_height()
                            ax.text(bar.get_x() + bar.get_width()/2., height + 0.02,
                                    f'{height:.2%}', ha='center', va='bottom')
                        
                        st.pyplot(fig)
                        
                        # Th√™m th√¥ng tin th·ªùi gian x·ª≠ l√Ω
                        st.markdown(f"""
                            <div class="info-item">
                                <div class="info-label">‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω:</div>
                                <div class="info-value">{process_time:.2f} gi√¢y</div>
                            </div>
                        """, unsafe_allow_html=True)

                        
                        if notes:
                            st.markdown(f"""
                                <div class="info-item">
                                    <div class="info-label">üìù Ghi ch√∫:</div>
                                    <div class="info-value">{notes}</div>
                                </div>
                            """, unsafe_allow_html=True)
                        
                        st.markdown("</div></div>", unsafe_allow_html=True)
                        
                        # T·∫°o b√°o c√°o PDF
                        pdf_buffer = create_pdf_report(
                            image, cam_image, prediction, prob_normal, prob_tb, process_time, 
                            uploaded_file.name, patient_info
                        )
                        
                        # N√∫t t·∫£i xu·ªëng PDF
                        st.download_button(
                            label="üìÑ T·∫£i b√°o c√°o PDF",
                            data=pdf_buffer,
                            file_name = f"bao_cao_xquang_{uploaded_file.name.split('.')[0]}.pdf",
                            mime="application/pdf",
                            key="download_single_pdf",
                            use_container_width=True
                        )

with tabs[1]:
    st.markdown("""
    <div class="tab-description">
        T·∫£i l√™n nhi·ªÅu ·∫£nh X-quang ph·ªïi ƒë·ªÉ ph√¢n t√≠ch h√†ng lo·∫°t v√† so s√°nh k·∫øt qu·∫£.
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.markdown('<div class="section-header">T·∫£i l√™n nhi·ªÅu ·∫£nh X-quang</div>', unsafe_allow_html=True)
        
        uploaded_files = st.file_uploader(
            "K√©o th·∫£ ho·∫∑c nh·∫•p ƒë·ªÉ ch·ªçn nhi·ªÅu ·∫£nh X-quang", 
            type=["jpg", "jpeg", "png"], 
            accept_multiple_files=True, 
            key="multiple_upload",
            help="H·ªó tr·ª£ c√°c ƒë·ªãnh d·∫°ng: JPG, JPEG, PNG"
        )
        
        if uploaded_files:
            st.markdown(f"<div class='upload-info'>ƒê√£ t·∫£i l√™n {len(uploaded_files)} ·∫£nh</div>", unsafe_allow_html=True)
            
            # Hi·ªÉn th·ªã ·∫£nh ƒë√£ t·∫£i l√™n d∆∞·ªõi d·∫°ng l∆∞·ªõi
            st.markdown("<div class='image-grid'>", unsafe_allow_html=True)
            for i, uploaded_file in enumerate(uploaded_files[:6]):  # Gi·ªõi h·∫°n hi·ªÉn th·ªã 6 ·∫£nh
                image = Image.open(uploaded_file).convert('RGB')
                st.image(image, width=150, caption=uploaded_file.name)
            
            if len(uploaded_files) > 6:
                st.markdown(f"<div class='more-images'>+{len(uploaded_files) - 6} ·∫£nh kh√°c</div>", unsafe_allow_html=True)
            st.markdown("</div>", unsafe_allow_html=True)
            
            # Ghi ch√∫ chung (kh√¥ng b·∫Øt bu·ªôc)
            batch_notes = st.text_area("Ghi ch√∫ chung (kh√¥ng b·∫Øt bu·ªôc):", key="batch_notes", height=100)
            
            col1_buttons = st.columns(2)
            with col1_buttons[0]:
                analyze_button = st.button("üîç Ph√¢n t√≠ch t·∫•t c·∫£", key="analyze_multiple", use_container_width=True)
            with col1_buttons[1]:
                reset_button = st.button("üîÑ L√†m m·ªõi", key="reset_multiple", use_container_width=True)
            
            if reset_button:
                st.session_state.needs_rerun = True
            
            if analyze_button:
                results = []
                images = []
                cam_images = []
                predictions = []
                probs_normal = []
                probs_tb = []
                process_times = []
                filenames = []
                pdf_buffers = []
                analysis_ids = []
                
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                for i, uploaded_file in enumerate(uploaded_files):
                    status_text.text(f"ƒêang ph√¢n t√≠ch ·∫£nh {i+1}/{len(uploaded_files)}: {uploaded_file.name}")
                    
                    # Hi·ªÉn th·ªã ·∫£nh g·ªëc
                    image = Image.open(uploaded_file).convert('RGB')
                    
                    # L∆∞u ·∫£nh t·∫°m th·ªùi
                    temp_dir = tempfile.mkdtemp()
                    temp_file_path = os.path.join(temp_dir, uploaded_file.name)
                    image.save(temp_file_path)
                    
                    # Ph√¢n t√≠ch ·∫£nh
                    cam_image, prediction, prob_normal, prob_tb, process_time = apply_cam(
                        temp_file_path, model, preprocess, last_conv_layer)
                    
                    # L∆∞u k·∫øt qu·∫£ v√†o database
                    analysis_id = save_analysis_to_db(
                        image, cam_image, prediction, prob_normal, prob_tb, process_time, 
                        uploaded_file.name, None, batch_notes
                    )
                    
                    # T·∫°o b√°o c√°o PDF
                    pdf_buffer = create_pdf_report(
                        image, cam_image, prediction, prob_normal, prob_tb, process_time, uploaded_file.name)
                    
                    # L∆∞u k·∫øt qu·∫£
                    images.append(image)
                    cam_images.append(cam_image)
                    predictions.append(prediction)
                    probs_normal.append(prob_normal)
                    probs_tb.append(prob_tb)
                    process_times.append(process_time)
                    filenames.append(uploaded_file.name)
                    pdf_buffers.append(pdf_buffer)
                    analysis_ids.append(analysis_id)
                    
                    results.append({
                        'T√™n file': uploaded_file.name,
                        'K·∫øt qu·∫£': 'Lao ph·ªïi' if prediction == 1 else 'B√¨nh th∆∞·ªùng',
                        'X√°c su·∫•t b√¨nh th∆∞·ªùng': f'{prob_normal:.2%}',
                        'X√°c su·∫•t lao ph·ªïi': f'{prob_tb:.2%}',
                        'Th·ªùi gian x·ª≠ l√Ω': f'{process_time:.2f}s'
                    })
                    
                    # C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh
                    progress_bar.progress((i + 1) / len(uploaded_files))
                
                status_text.text("Ph√¢n t√≠ch ho√†n t·∫•t!")
                
                with col2:
                    st.markdown('<div class="section-header">K·∫øt qu·∫£ ph√¢n t√≠ch</div>', unsafe_allow_html=True)
                    
                    # Th·ªëng k√™ t·ªïng quan
                    total = len(predictions)
                    normal_count = predictions.count(0)
                    tb_count = predictions.count(1)
                    
                    st.markdown(f"""
                    <div class="stats-container">
                        <div class="stat-card">
                            <div class="stat-value">{total}</div>
                            <div class="stat-label">T·ªïng s·ªë ·∫£nh</div>
                        </div>
                        <div class="stat-card normal">
                            <div class="stat-value">{normal_count}</div>
                            <div class="stat-label">B√¨nh th∆∞·ªùng</div>
                        </div>
                        <div class="stat-card tb">
                            <div class="stat-value">{tb_count}</div>
                            <div class="stat-label">Nghi ng·ªù lao ph·ªïi</div>
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # T·∫°o bi·ªÉu ƒë·ªì tr√≤n
                    if total > 0:
                        fig, ax = plt.subplots(figsize=(6, 4))
                        labels = ['B√¨nh th∆∞·ªùng', 'Lao ph·ªïi']
                        sizes = [normal_count, tb_count]
                        colors = ['#2ecc71', '#e74c3c']
                        explode = (0.1, 0.1)
                        
                        ax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',
                              shadow=True, startangle=90)
                        ax.axis('equal')
                        ax.set_title('Ph√¢n b·ªë k·∫øt qu·∫£')
                        
                        st.pyplot(fig)
                    
                    # Hi·ªÉn th·ªã b·∫£ng k·∫øt qu·∫£
                    st.markdown("<div class='table-container'>", unsafe_allow_html=True)
                    st.dataframe(
                        df,
                        column_config={
                            "K·∫øt qu·∫£": st.column_config.TextColumn(
                                "K·∫øt qu·∫£",
                                help="K·∫øt qu·∫£ ph√¢n t√≠ch",
                                width="medium",
                            ),
                            "X√°c su·∫•t b√¨nh th∆∞·ªùng": st.column_config.TextColumn(
                                "X√°c su·∫•t b√¨nh th∆∞·ªùng",
                                width="medium",
                            ),
                            "X√°c su·∫•t lao ph·ªïi": st.column_config.TextColumn(
                                "X√°c su·∫•t lao ph·ªïi",
                                width="medium",
                            ),
                        },
                        use_container_width=True,
                        hide_index=True,
                    )
                    st.markdown("</div>", unsafe_allow_html=True)
                    
                    # Hi·ªÉn th·ªã ·∫£nh v·ªõi CAM cho c√°c tr∆∞·ªùng h·ª£p lao ph·ªïi
                    if tb_count > 0:
                        st.markdown('<div class="section-header">C√°c tr∆∞·ªùng h·ª£p nghi ng·ªù lao ph·ªïi</div>', unsafe_allow_html=True)
                        st.markdown("<div class='cam-grid'>", unsafe_allow_html=True)
                        
                        for idx, (img, cam_img, pred, filename) in enumerate(zip(images, cam_images, predictions, filenames)):
                            if pred == 1:
                                col_img, col_cam = st.columns(2)
                                with col_img:
                                    st.image(img, caption=f"G·ªëc: {filename}", use_container_width=True)
                                with col_cam:
                                    st.image(cam_img, caption=f"CAM: {filename}", use_container_width=True)
                        
                        st.markdown("</div>", unsafe_allow_html=True)
                    
                    # T·∫°o b√°o c√°o PDF t·ªïng h·ª£p cho t·∫•t c·∫£ c√°c ·∫£nh
                    st.markdown('<div class="section-header">B√°o c√°o PDF</div>', unsafe_allow_html=True)
                    
                    # T·∫°o c√°c n√∫t t·∫£i xu·ªëng cho t·ª´ng ·∫£nh
                    for idx, (filename, pdf_buffer) in enumerate(zip(filenames, pdf_buffers)):
                        col_pdf = st.columns([3, 1])
                        with col_pdf[0]:
                            result_text = "Lao ph·ªïi" if predictions[idx] == 1 else "B√¨nh th∆∞·ªùng"
                            result_class = "tb" if predictions[idx] == 1 else "normal"
                            st.markdown(f"""
                            <div class="pdf-item">
                                <div class="pdf-filename">{filename}</div>
                                <div class="pdf-result {result_class}">{result_text}</div>
                            </div>
                            """, unsafe_allow_html=True)
                        with col_pdf[1]:
                            st.download_button(
                                label="üìÑ T·∫£i PDF",
                                data=pdf_buffer,
                                file_name=f"bao_cao_xquang_{filename.split('.')[ utrud: f"bao_cao_xquang_{filename.split('.')[0]}.pdf",
                                mime="application/pdf",
                                key=f"download_pdf_{idx}",
                                use_container_width=True
                            )

with tabs[2]:
    st.markdown("""
    <div class="tab-description">
        Th√¥ng tin v·ªÅ ·ª©ng d·ª•ng ph√°t hi·ªán lao ph·ªïi qua ·∫£nh X-quang.
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown('<div class="section-header">Gi·ªõi thi·ªáu</div>', unsafe_allow_html=True)
    
    st.markdown("""
    ·ª®ng d·ª•ng n√†y s·ª≠ d·ª•ng tr√≠ tu·ªá nh√¢n t·∫°o ƒë·ªÉ ph√¢n t√≠ch ·∫£nh X-quang ph·ªïi v√† ph√°t hi·ªán d·∫•u hi·ªáu c·ªßa b·ªánh lao ph·ªïi. 
    H·ªá th·ªëng ƒë∆∞·ª£c ph√°t tri·ªÉn d·ª±a tr√™n m√¥ h√¨nh h·ªçc s√¢u (deep learning) ƒë∆∞·ª£c hu·∫•n luy·ªán tr√™n h√†ng ngh√¨n ·∫£nh X-quang 
    ƒë√£ ƒë∆∞·ª£c b√°c sƒ© chuy√™n khoa ch·∫©n ƒëo√°n.
    
    ### C√°ch s·ª≠ d·ª•ng
    
    1. **Ph√¢n t√≠ch m·ªôt ·∫£nh**: T·∫£i l√™n m·ªôt ·∫£nh X-quang ph·ªïi ƒë·ªÉ ph√¢n t√≠ch. B·∫°n c√≥ th·ªÉ ch·ªçn b·ªánh nh√¢n t·ª´ danh s√°ch 
       ho·∫∑c ph√¢n t√≠ch ·∫£nh m√† kh√¥ng c·∫ßn li√™n k·∫øt v·ªõi b·ªánh nh√¢n c·ª• th·ªÉ.
    
    2. **Ph√¢n t√≠ch nhi·ªÅu ·∫£nh**: T·∫£i l√™n nhi·ªÅu ·∫£nh X-quang ph·ªïi ƒë·ªÉ ph√¢n t√≠ch h√†ng lo·∫°t. H·ªá th·ªëng s·∫Ω x·ª≠ l√Ω t·∫•t c·∫£ 
       c√°c ·∫£nh v√† cung c·∫•p k·∫øt qu·∫£ t·ªïng h·ª£p.
    
    ### L∆∞u √Ω quan tr·ªçng
    
    - K·∫øt qu·∫£ ph√¢n t√≠ch t·ª´ ·ª©ng d·ª•ng n√†y ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o v√† h·ªó tr·ª£.
    - Ch·∫©n ƒëo√°n cu·ªëi c√πng n√™n ƒë∆∞·ª£c th·ª±c hi·ªán b·ªüi b√°c sƒ© chuy√™n khoa c√≥ kinh nghi·ªám.
    - ƒê·ªô ch√≠nh x√°c c·ªßa m√¥ h√¨nh ph·ª• thu·ªôc v√†o ch·∫•t l∆∞·ª£ng ·∫£nh X-quang ƒë·∫ßu v√†o.
    
    ### V·ªÅ b·ªánh lao ph·ªïi
    
    Lao ph·ªïi l√† m·ªôt b·ªánh truy·ªÅn nhi·ªÖm do vi khu·∫©n Mycobacterium tuberculosis g√¢y ra, ch·ªß y·∫øu ·∫£nh h∆∞·ªüng ƒë·∫øn ph·ªïi. 
    B·ªánh lao ph·ªïi c√≥ th·ªÉ ƒë∆∞·ª£c ch·∫©n ƒëo√°n th√¥ng qua nhi·ªÅu ph∆∞∆°ng ph√°p, trong ƒë√≥ X-quang ng·ª±c l√† m·ªôt c√¥ng c·ª• s√†ng l·ªçc 
    quan tr·ªçng ƒë·ªÉ ph√°t hi·ªán c√°c t·ªïn th∆∞∆°ng nghi ng·ªù.
    
    C√°c d·∫•u hi·ªáu c·ªßa lao ph·ªïi tr√™n phim X-quang c√≥ th·ªÉ bao g·ªìm:
    - C√°c ƒë√°m m·ªù ho·∫∑c n·ªët ·ªü ph·∫ßn tr√™n c·ªßa ph·ªïi
    - Hang lao (c√°c khoang tr·ªëng trong ph·ªïi)
    - T·ªïn th∆∞∆°ng d·∫°ng x∆° h√≥a
    - Tr√†n d·ªãch m√†ng ph·ªïi
    
    ### Li√™n h·ªá
    
    N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi ho·∫∑c ph·∫£n h·ªìi n√†o v·ªÅ ·ª©ng d·ª•ng, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i qua email: support@example.com
    """)

if __name__ == "__main__":
    pass