import streamlit as st
import torch
import torchvision.transforms as transforms
from PIL import Image
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from src.model import get_model
from src.visualization import apply_cam
import tempfile
import os
os.environ['STREAMLIT_SERVER_WATCH_DIRS'] = 'false'
import io
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors as reportlab_colors
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image as RLImage, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import matplotlib
matplotlib.use('Agg')
import uuid
from database import User, Patient, Analysis, get_db

# Thi·∫øt l·∫≠p trang
st.set_page_config(
    page_title="Ph√°t hi·ªán lao ph·ªïi qua X-quang", 
    layout="wide",
    initial_sidebar_state="collapsed",
    page_icon="ü´Å"
)

# Ki·ªÉm tra ƒëƒÉng nh·∫≠p
if "user_info" not in st.session_state:
    st.warning("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng ·ª©ng d·ª•ng")
    st.button("ƒêi ƒë·∫øn trang ƒëƒÉng nh·∫≠p", on_click=lambda: st.switch_page("auth.py"))
    st.stop()

# ƒêƒÉng k√Ω font h·ªó tr·ª£ ti·∫øng Vi·ªát
font_paths = [
    os.path.join(os.path.dirname(__file__), 'DejaVuSans.ttf'),
    os.path.join(os.path.dirname(__file__), 'fonts', 'DejaVuSans.ttf'),
    'DejaVuSans.ttf'
]

font_registered = False
for font_path in font_paths:
    if os.path.exists(font_path):
        try:
            pdfmetrics.registerFont(TTFont('DejaVuSans', font_path))
            font_registered = True
            break
        except Exception as e:
            st.warning(f"Kh√¥ng th·ªÉ ƒëƒÉng k√Ω font t·ª´ {font_path}: {e}")

if not font_registered:
    st.warning("Kh√¥ng th·ªÉ ƒëƒÉng k√Ω font DejaVuSans. S·∫Ω s·ª≠ d·ª•ng font m·∫∑c ƒë·ªãnh.")

# Import CSS t·ª´ file ri√™ng
with open('style.css') as f:
    st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

# T·∫£i m√¥ h√¨nh
@st.cache_resource
def load_model():
    model = get_model(num_classes=2)
    model.load_state_dict(torch.load('models/best_model.pth', map_location=torch.device('cpu')))
    model.eval()
    return model

# Ti·ªÅn x·ª≠ l√Ω ·∫£nh
preprocess = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
])

# T·∫°o b√°o c√°o PDF
def create_pdf_report(image, cam_image, prediction, prob_normal, prob_tb, process_time, filename=None, patient_info=None):
    buffer = io.BytesIO()
    
    # T·∫°o document PDF
    doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=72, leftMargin=72, topMargin=72, bottomMargin=72)
    
    # T·∫°o style cho vƒÉn b·∫£n
    styles = getSampleStyleSheet()
    
    # Ki·ªÉm tra xem font DejaVuSans ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω ch∆∞a
    vietnamese_font = 'DejaVuSans'
    if vietnamese_font in pdfmetrics.getRegisteredFontNames():
        styles.add(ParagraphStyle(name='Vietnamese', fontName=vietnamese_font, fontSize=12))
    else:
        # N·∫øu font kh√¥ng c√≥, s·ª≠ d·ª•ng font m·∫∑c ƒë·ªãnh
        styles.add(ParagraphStyle(name='Vietnamese', fontName='Helvetica', fontSize=12))
    
    # Danh s√°ch c√°c ph·∫ßn t·ª≠ trong PDF
    elements = []
    
    # Ti√™u ƒë·ªÅ
    title_style = styles["Heading1"]
    title_style.alignment = 1  # Center
    if vietnamese_font in pdfmetrics.getRegisteredFontNames():
        title_style.fontName = vietnamese_font
    elements.append(Paragraph("K·∫æT QU·∫¢ PH√ÇN T√çCH X-QUANG PH·ªîI", title_style))
    elements.append(Spacer(1, 20))
    
    # Ng√†y gi·ªù ph√¢n t√≠ch
    date_style = styles["Normal"]
    date_style.alignment = 1  # Center
    if vietnamese_font in pdfmetrics.getRegisteredFontNames():
        date_style.fontName = vietnamese_font
    current_time = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    elements.append(Paragraph(f"Ng√†y gi·ªù ph√¢n t√≠ch: {current_time}", date_style))
    elements.append(Spacer(1, 20))
    
    # Th√¥ng tin b·ªánh nh√¢n n·∫øu c√≥
    if patient_info:
        patient_style = styles["Heading2"]
        if vietnamese_font in pdfmetrics.getRegisteredFontNames():
            patient_style.fontName = vietnamese_font
        elements.append(Paragraph("TH√îNG TIN B·ªÜNH NH√ÇN", patient_style))
        elements.append(Spacer(1, 10))
        
        patient_data = [
            ["Th√¥ng tin", "Chi ti·∫øt"],
            ["M√£ b·ªánh nh√¢n", patient_info["patient_code"]],
            ["H·ªç v√† t√™n", patient_info["full_name"]],
            ["Tu·ªïi", str(patient_info["age"])],
            ["Gi·ªõi t√≠nh", patient_info["gender"]]
        ]
        
        if patient_info.get("address"):
            patient_data.append(["ƒê·ªãa ch·ªâ", patient_info["address"]])
        
        if patient_info.get("phone"):
            patient_data.append(["S·ªë ƒëi·ªán tho·∫°i", patient_info["phone"]])
        
        patient_table = Table(patient_data, colWidths=[200, 200])
        patient_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (1, 0), reportlab_colors.grey),
            ('TEXTCOLOR', (0, 0), (1, 0), reportlab_colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (1, 0), vietnamese_font if vietnamese_font in pdfmetrics.getRegisteredFontNames() else 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), reportlab_colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, reportlab_colors.black),
            ('FONTNAME', (0, 1), (0, -1), vietnamese_font if vietnamese_font in pdfmetrics.getRegisteredFontNames() else 'Helvetica'),
            ('FONTNAME', (1, 1), (1, -1), vietnamese_font if vietnamese_font in pdfmetrics.getRegisteredFontNames() else 'Helvetica'),
        ]))
        
        elements.append(patient_table)
        elements.append(Spacer(1, 20))
    
    if filename:
        file_style = styles["Normal"]
        if vietnamese_font in pdfmetrics.getRegisteredFontNames():
            file_style.fontName = vietnamese_font
        elements.append(Paragraph(f"T√™n file: {filename}", file_style))
        elements.append(Spacer(1, 10))
    
    # L∆∞u ·∫£nh g·ªëc v√† ·∫£nh CAM
    img_path = tempfile.mktemp(suffix='.png')
    cam_path = tempfile.mktemp(suffix='.png')
    
    # Chuy·ªÉn ƒë·ªïi ·∫£nh PIL sang ƒë·ªãnh d·∫°ng ph√π h·ª£p
    image.save(img_path)
    
    # N·∫øu cam_image l√† m·∫£ng numpy, chuy·ªÉn th√†nh PIL Image
    if isinstance(cam_image, np.ndarray):
        cam_image_pil = Image.fromarray(cam_image)
        cam_image_pil.save(cam_path)
    else:
        cam_image.save(cam_path)
    
    # Th√™m ·∫£nh v√†o PDF
    heading_style = styles["Heading2"]
    if vietnamese_font in pdfmetrics.getRegisteredFontNames():
        heading_style.fontName = vietnamese_font
    
    elements.append(Paragraph("·∫¢nh X-quang g·ªëc:", heading_style))
    elements.append(Spacer(1, 10))
    elements.append(RLImage(img_path, width=400, height=300))
    elements.append(Spacer(1, 20))
    
    elements.append(Paragraph("·∫¢nh ph√¢n t√≠ch (CAM):", heading_style))
    elements.append(Spacer(1, 10))
    elements.append(RLImage(cam_path
