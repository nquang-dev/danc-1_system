import streamlit as st
import torch
import torchvision.transforms as transforms
from PIL import Image
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from src.model import get_model
from src.visualization import apply_cam
import tempfile
import os
os.environ['STREAMLIT_SERVER_WATCH_DIRS'] = 'false'
import io
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors as reportlab_colors
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image as RLImage, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import matplotlib
matplotlib.use('Agg')


# Thi·∫øt l·∫≠p trang
st.set_page_config(
    page_title="Ph√°t hi·ªán lao ph·ªïi qua X-quang", 
    layout="wide",
    initial_sidebar_state="collapsed",
    page_icon="ü´Å"
)


# ƒêƒÉng k√Ω font h·ªó tr·ª£ ti·∫øng Vi·ªát
font_paths = [
    os.path.join(os.path.dirname(__file__), 'DejaVuSans.ttf'),
    os.path.join(os.path.dirname(__file__), 'fonts', 'DejaVuSans.ttf'),
    'DejaVuSans.ttf'
]

font_registered = False
for font_path in font_paths:
    if os.path.exists(font_path):
        try:
            pdfmetrics.registerFont(TTFont('DejaVuSans', font_path))
            font_registered = True
            break
        except Exception as e:
            st.warning(f"Kh√¥ng th·ªÉ ƒëƒÉng k√Ω font t·ª´ {font_path}: {e}")

if not font_registered:
    st.warning("Kh√¥ng th·ªÉ ƒëƒÉng k√Ω font DejaVuSans. S·∫Ω s·ª≠ d·ª•ng font m·∫∑c ƒë·ªãnh.")

# Import CSS t·ª´ file ri√™ng
with open('style.css') as f:
    st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

# T·∫£i m√¥ h√¨nh
@st.cache_resource
def load_model():
    model = get_model(num_classes=2)
    model.load_state_dict(torch.load('models/best_model.pth', map_location=torch.device('cpu')))
    model.eval()
    return model

# Ti·ªÅn x·ª≠ l√Ω ·∫£nh
preprocess = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
])

# T·∫°o b√°o c√°o PDF
def create_pdf_report(image, cam_image, prediction, prob_normal, prob_tb, process_time, filename=None):
    buffer = io.BytesIO()
    
    # T·∫°o document PDF
    doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=72, leftMargin=72, topMargin=72, bottomMargin=72)
    
    # T·∫°o style cho vƒÉn b·∫£n
    styles = getSampleStyleSheet()
    
    # Ki·ªÉm tra xem font DejaVuSans ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω ch∆∞a
    vietnamese_font = 'DejaVuSans'
    if vietnamese_font in pdfmetrics.getRegisteredFontNames():
        styles.add(ParagraphStyle(name='Vietnamese', fontName=vietnamese_font, fontSize=12))
    else:
        # N·∫øu font kh√¥ng c√≥, s·ª≠ d·ª•ng font m·∫∑c ƒë·ªãnh
        styles.add(ParagraphStyle(name='Vietnamese', fontName='Helvetica', fontSize=12))
    
    # Danh s√°ch c√°c ph·∫ßn t·ª≠ trong PDF
    elements = []
    
    # Ti√™u ƒë·ªÅ
    title_style = styles["Heading1"]
    title_style.alignment = 1  # Center
    if vietnamese_font in pdfmetrics.getRegisteredFontNames():
        title_style.fontName = vietnamese_font
    elements.append(Paragraph("K·∫æT QU·∫¢ PH√ÇN T√çCH X-QUANG PH·ªîI", title_style))
    elements.append(Spacer(1, 20))
    
    # Ng√†y gi·ªù ph√¢n t√≠ch
    date_style = styles["Normal"]
    date_style.alignment = 1  # Center
    if vietnamese_font in pdfmetrics.getRegisteredFontNames():
        date_style.fontName = vietnamese_font
    current_time = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    elements.append(Paragraph(f"Ng√†y gi·ªù ph√¢n t√≠ch: {current_time}", date_style))
    elements.append(Spacer(1, 20))
    
    if filename:
        file_style = styles["Normal"]
        if vietnamese_font in pdfmetrics.getRegisteredFontNames():
            file_style.fontName = vietnamese_font
        elements.append(Paragraph(f"T√™n file: {filename}", file_style))
        elements.append(Spacer(1, 10))
    
    # L∆∞u ·∫£nh g·ªëc v√† ·∫£nh CAM
    img_path = tempfile.mktemp(suffix='.png')
    cam_path = tempfile.mktemp(suffix='.png')
    
    # Chuy·ªÉn ƒë·ªïi ·∫£nh PIL sang ƒë·ªãnh d·∫°ng ph√π h·ª£p
    image.save(img_path)
    
    # N·∫øu cam_image l√† m·∫£ng numpy, chuy·ªÉn th√†nh PIL Image
    if isinstance(cam_image, np.ndarray):
        cam_image_pil = Image.fromarray(cam_image)
        cam_image_pil.save(cam_path)
    else:
        cam_image.save(cam_path)
    
    # Th√™m ·∫£nh v√†o PDF
    heading_style = styles["Heading2"]
    if vietnamese_font in pdfmetrics.getRegisteredFontNames():
        heading_style.fontName = vietnamese_font
    
    elements.append(Paragraph("·∫¢nh X-quang g·ªëc:", heading_style))
    elements.append(Spacer(1, 10))
    elements.append(RLImage(img_path, width=400, height=300))
    elements.append(Spacer(1, 20))
    
    elements.append(Paragraph("·∫¢nh ph√¢n t√≠ch (CAM):", heading_style))
    elements.append(Spacer(1, 10))
    elements.append(RLImage(cam_path, width=400, height=300))
    elements.append(Spacer(1, 20))
    
    # K·∫øt qu·∫£ ph√¢n t√≠ch
    elements.append(Paragraph("K·∫æT QU·∫¢ CH·∫®N ƒêO√ÅN:", heading_style))
    elements.append(Spacer(1, 10))
    
    if prediction == 1:
        result_text = "PH√ÅT HI·ªÜN D·∫§U HI·ªÜU LAO PH·ªîI"
        result_color = reportlab_colors.red
    else:
        result_text = "KH√îNG PH√ÅT HI·ªÜN D·∫§U HI·ªÜU LAO PH·ªîI"
        result_color = reportlab_colors.green
    
    result_style = ParagraphStyle(
        name='ResultStyle',
        parent=styles["Heading2"],
        textColor=result_color,
        alignment=1  # Center
    )
    if vietnamese_font in pdfmetrics.getRegisteredFontNames():
        result_style.fontName = vietnamese_font
    elements.append(Paragraph(result_text, result_style))
    elements.append(Spacer(1, 20))
    
    # Th√¥ng tin chi ti·∫øt
    data = [
        ["Th√¥ng s·ªë", "Gi√° tr·ªã"],
        ["X√°c su·∫•t b√¨nh th∆∞·ªùng", f"{prob_normal:.2%}"],
        ["X√°c su·∫•t lao ph·ªïi", f"{prob_tb:.2%}"],
        ["Th·ªùi gian x·ª≠ l√Ω", f"{process_time:.2f} gi√¢y"]
    ]

    table = Table(data, colWidths=[200, 200])

    # X√°c ƒë·ªãnh font s·∫Ω s·ª≠ d·ª•ng
    use_font = vietnamese_font if vietnamese_font in pdfmetrics.getRegisteredFontNames() else 'Helvetica'
    bold_font = vietnamese_font if vietnamese_font in pdfmetrics.getRegisteredFontNames() else 'Helvetica-Bold'

    table.setStyle(TableStyle([
        # ƒê·ªãnh d·∫°ng h√†ng ti√™u ƒë·ªÅ
        ('BACKGROUND', (0, 0), (1, 0), reportlab_colors.grey),
        ('TEXTCOLOR', (0, 0), (1, 0), reportlab_colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (1, 0), bold_font),  # Ti√™u ƒë·ªÅ s·ª≠ d·ª•ng font in ƒë·∫≠m
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        
        # ƒê·ªãnh d·∫°ng n·ªôi dung
        ('BACKGROUND', (0, 1), (-1, -1), reportlab_colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, reportlab_colors.black),
        
        # √Åp d·ª•ng font cho t·∫•t c·∫£ c√°c √¥ n·ªôi dung
        ('FONTNAME', (0, 1), (0, -1), use_font),  # C·ªôt 1 (Th√¥ng s·ªë)
        ('FONTNAME', (1, 1), (1, -1), use_font),  # C·ªôt 2 (Gi√° tr·ªã)
    ]))
    
    elements.append(table)
    elements.append(Spacer(1, 20))
    
    # L∆∞u √Ω
    note_heading_style = styles["Heading3"]
    if vietnamese_font in pdfmetrics.getRegisteredFontNames():
        note_heading_style.fontName = vietnamese_font
    elements.append(Paragraph("L∆∞u √Ω:", note_heading_style))
    elements.append(Paragraph("K·∫øt qu·∫£ n√†y ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o. Vui l√≤ng tham kh·∫£o √Ω ki·∫øn c·ªßa b√°c sƒ© chuy√™n khoa ƒë·ªÉ c√≥ ch·∫©n ƒëo√°n ch√≠nh x√°c.", styles["Vietnamese"]))
    
    # X√¢y d·ª±ng PDF
    doc.build(elements)
    
    # X√≥a file t·∫°m
    os.unlink(img_path)
    os.unlink(cam_path)
    
    buffer.seek(0)
    return buffer

# Header v·ªõi logo v√† ti√™u ƒë·ªÅ
st.markdown("""
<div class="header">
    <div class="logo-container">
        <img src="https://cdn-icons-png.flaticon.com/512/2966/2966327.png" class="logo">
    </div>
    <div class="title-container">
        <h1>PH√ÅT HI·ªÜN LAO PH·ªîI QUA ·∫¢NH X-QUANG</h1>
        <p class="subtitle">·ª®ng d·ª•ng tr√≠ tu·ªá nh√¢n t·∫°o trong ch·∫©n ƒëo√°n h√¨nh ·∫£nh y t·∫ø</p>
    </div>
</div>
""", unsafe_allow_html=True)

# T·∫£i m√¥ h√¨nh
try:
    with st.spinner("ƒêang t·∫£i m√¥ h√¨nh AI..."):
        model = load_model()
        last_conv_layer = model.layer4[-1]
    st.success("‚úÖ M√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!")
except Exception as e:
    st.error(f"‚ùå Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh: {e}")
    st.stop()

# T·∫°o tabs v·ªõi thi·∫øt k·∫ø m·ªõi
tabs = st.tabs([
    "üîç Ph√¢n t√≠ch m·ªôt ·∫£nh", 
    "üìä Ph√¢n t√≠ch nhi·ªÅu ·∫£nh",
    "‚ÑπÔ∏è Th√¥ng tin"
])

with tabs[0]:
    st.markdown("""
    <div class="tab-description">
        T·∫£i l√™n m·ªôt ·∫£nh X-quang ph·ªïi ƒë·ªÉ ph√¢n t√≠ch v√† ph√°t hi·ªán d·∫•u hi·ªáu lao ph·ªïi.
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.markdown('<div class="section-header">T·∫£i l√™n ·∫£nh X-quang ph·ªïi</div>', unsafe_allow_html=True)
        
        upload_placeholder = st.empty()
        with upload_placeholder.container():
            uploaded_file = st.file_uploader(
                "K√©o th·∫£ ho·∫∑c nh·∫•p ƒë·ªÉ ch·ªçn ·∫£nh X-quang", 
                type=["jpg", "jpeg", "png"], 
                key="single_upload",
                help="H·ªó tr·ª£ c√°c ƒë·ªãnh d·∫°ng: JPG, JPEG, PNG"
            )
        
        if uploaded_file:
            # Hi·ªÉn th·ªã ·∫£nh g·ªëc trong khung ƒë·∫πp h∆°n
            image = Image.open(uploaded_file).convert('RGB')
            st.markdown('<div class="image-container">', unsafe_allow_html=True)
            st.image(image, use_container_width=True)
            st.markdown('</div>', unsafe_allow_html=True)
            st.markdown(f'<div class="image-caption">·∫¢nh: {uploaded_file.name}</div>', unsafe_allow_html=True)
            
            col1_buttons = st.columns(2)
            with col1_buttons[0]:
                analyze_button = st.button("üîç Ph√¢n t√≠ch ·∫£nh", key="analyze_single", use_container_width=True)
            with col1_buttons[1]:
                reset_button = st.button("üîÑ L√†m m·ªõi", key="reset_single", use_container_width=True)
            
            if reset_button:
                st.rerun()
            
            if analyze_button:
                with st.spinner("‚è≥ ƒêang ph√¢n t√≠ch ·∫£nh..."):
                    # L∆∞u ·∫£nh t·∫°m th·ªùi
                    temp_dir = tempfile.mkdtemp()
                    temp_file_path = os.path.join(temp_dir, uploaded_file.name)
                    image.save(temp_file_path)
                    
                    # Ph√¢n t√≠ch ·∫£nh
                    cam_image, prediction, prob_normal, prob_tb, process_time = apply_cam(
                        temp_file_path, model, preprocess, last_conv_layer)
                    
                    with col2:
                        st.markdown('<div class="section-header">K·∫øt qu·∫£ ph√¢n t√≠ch</div>', unsafe_allow_html=True)
                        
                        # Hi·ªÉn th·ªã k·∫øt qu·∫£ v·ªõi thi·∫øt k·∫ø ƒë·∫πp h∆°n
                        if prediction == 1:
                            st.markdown("""
                            <div class="result-card tb">
                                <div class="result-icon">‚ö†Ô∏è</div>
                                <div class="result-text">Ph√°t hi·ªán d·∫•u hi·ªáu lao ph·ªïi</div>
                            </div>
                            """, unsafe_allow_html=True)
                        else:
                            st.markdown("""
                            <div class="result-card normal">
                                <div class="result-icon">‚úÖ</div>
                                <div class="result-text">Kh√¥ng ph√°t hi·ªán d·∫•u hi·ªáu lao ph·ªïi</div>
                            </div>
                            """, unsafe_allow_html=True)
                        
                        # Hi·ªÉn th·ªã ·∫£nh CAM
                        st.markdown('<div class="image-container">', unsafe_allow_html=True)
                        st.image(cam_image, use_container_width=True)
                        st.markdown('</div>', unsafe_allow_html=True)
                        st.markdown('<div class="image-caption">V√πng ph√¢n t√≠ch (CAM)</div>', unsafe_allow_html=True)
                        
                        # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt trong card
                        st.markdown("""
                        <div class="info-card">
                            <div class="info-card-header">Th√¥ng tin chi ti·∫øt</div>
                            <div class="info-card-content">
                        """, unsafe_allow_html=True)
                        
                        # T·∫°o bi·ªÉu ƒë·ªì x√°c su·∫•t
                        fig, ax = plt.subplots(figsize=(8, 3))
                        labels = ['B√¨nh th∆∞·ªùng', 'Lao ph·ªïi']
                        values = [prob_normal, prob_tb]
                        colors = ['#2ecc71', '#e74c3c']
                        
                        bars = ax.bar(labels, values, color=colors)
                        ax.set_ylim(0, 1)
                        ax.set_ylabel('X√°c su·∫•t')
                        ax.set_title('Ph√¢n t√≠ch x√°c su·∫•t')
                        
                        # Th√™m nh√£n ph·∫ßn trƒÉm tr√™n m·ªói c·ªôt
                        for bar in bars:
                            height = bar.get_height()
                            ax.text(bar.get_x() + bar.get_width()/2., height + 0.02,
                                    f'{height:.2%}', ha='center', va='bottom')
                        
                        st.pyplot(fig)
                        
                        # Th√™m th√¥ng tin th·ªùi gian x·ª≠ l√Ω
                        st.markdown(f"""
                            <div class="info-item">
                                <div class="info-label">‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω:</div>
                                <div class="info-value">{process_time:.2f} gi√¢y</div>
                            </div>
                        """, unsafe_allow_html=True)
                        
                        st.markdown("</div></div>", unsafe_allow_html=True)
                        
                        # T·∫°o b√°o c√°o PDF
                        pdf_buffer = create_pdf_report(
                            image, cam_image, prediction, prob_normal, prob_tb, process_time, uploaded_file.name)
                        
                        # N√∫t t·∫£i xu·ªëng PDF
                        st.download_button(
                            label="üìÑ T·∫£i b√°o c√°o PDF",
                            data=pdf_buffer,
                            file_name=f"bao_cao_xquang_{uploaded_file.name.split('.')[0]}.pdf",
                            mime="application/pdf",
                            key="download_single_pdf",
                            use_container_width=True
                        )

with tabs[1]:
    st.markdown("""
    <div class="tab-description">
        T·∫£i l√™n nhi·ªÅu ·∫£nh X-quang ph·ªïi ƒë·ªÉ ph√¢n t√≠ch h√†ng lo·∫°t v√† so s√°nh k·∫øt qu·∫£.
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.markdown('<div class="section-header">T·∫£i l√™n nhi·ªÅu ·∫£nh X-quang</div>', unsafe_allow_html=True)
        
        uploaded_files = st.file_uploader(
            "K√©o th·∫£ ho·∫∑c nh·∫•p ƒë·ªÉ ch·ªçn nhi·ªÅu ·∫£nh X-quang", 
            type=["jpg", "jpeg", "png"], 
            accept_multiple_files=True, 
            key="multiple_upload",
            help="H·ªó tr·ª£ c√°c ƒë·ªãnh d·∫°ng: JPG, JPEG, PNG"
        )
        
        if uploaded_files:
            st.markdown(f"<div class='upload-info'>ƒê√£ t·∫£i l√™n {len(uploaded_files)} ·∫£nh</div>", unsafe_allow_html=True)
            
            # Hi·ªÉn th·ªã ·∫£nh ƒë√£ t·∫£i l√™n d∆∞·ªõi d·∫°ng l∆∞·ªõi
            st.markdown("<div class='image-grid'>", unsafe_allow_html=True)
            for i, uploaded_file in enumerate(uploaded_files[:6]):  # Gi·ªõi h·∫°n hi·ªÉn th·ªã 6 ·∫£nh
                image = Image.open(uploaded_file).convert('RGB')
                st.image(image, width=150, caption=uploaded_file.name)
            
            if len(uploaded_files) > 6:
                st.markdown(f"<div class='more-images'>+{len(uploaded_files) - 6} ·∫£nh kh√°c</div>", unsafe_allow_html=True)
            st.markdown("</div>", unsafe_allow_html=True)
            
            col1_buttons = st.columns(2)
            with col1_buttons[0]:
                analyze_button = st.button("üîç Ph√¢n t√≠ch t·∫•t c·∫£", key="analyze_multiple", use_container_width=True)
            with col1_buttons[1]:
                reset_button = st.button("üîÑ L√†m m·ªõi", key="reset_multiple", use_container_width=True)
            
            if reset_button:
                st.rerun()
            
            if analyze_button:
                results = []
                images = []
                cam_images = []
                predictions = []
                probs_normal = []
                probs_tb = []
                process_times = []
                filenames = []
                pdf_buffers = []
                
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                for i, uploaded_file in enumerate(uploaded_files):
                    status_text.text(f"ƒêang ph√¢n t√≠ch ·∫£nh {i+1}/{len(uploaded_files)}: {uploaded_file.name}")
                    
                    # Hi·ªÉn th·ªã ·∫£nh g·ªëc
                    image = Image.open(uploaded_file).convert('RGB')
                    
                    # L∆∞u ·∫£nh t·∫°m th·ªùi
                    temp_dir = tempfile.mkdtemp()
                    temp_file_path = os.path.join(temp_dir, uploaded_file.name)
                    image.save(temp_file_path)
                    
                    # Ph√¢n t√≠ch ·∫£nh
                    cam_image, prediction, prob_normal, prob_tb, process_time = apply_cam(
                        temp_file_path, model, preprocess, last_conv_layer)
                    
                    # T·∫°o b√°o c√°o PDF
                    pdf_buffer = create_pdf_report(
                        image, cam_image, prediction, prob_normal, prob_tb, process_time, uploaded_file.name)
                    
                    # L∆∞u k·∫øt qu·∫£
                    images.append(image)
                    cam_images.append(cam_image)
                    predictions.append(prediction)
                    probs_normal.append(prob_normal)
                    probs_tb.append(prob_tb)
                    process_times.append(process_time)
                    filenames.append(uploaded_file.name)
                    pdf_buffers.append(pdf_buffer)
                    
                    results.append({
                        'T√™n file': uploaded_file.name,
                        'K·∫øt qu·∫£': 'Lao ph·ªïi' if prediction == 1 else 'B√¨nh th∆∞·ªùng',
                        'X√°c su·∫•t b√¨nh th∆∞·ªùng': f'{prob_normal:.2%}',
                        'X√°c su·∫•t lao ph·ªïi': f'{prob_tb:.2%}',
                        'Th·ªùi gian x·ª≠ l√Ω': f'{process_time:.2f}s'
                    })
                    
                    # C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh
                    progress_bar.progress((i + 1) / len(uploaded_files))
                
                status_text.text("Ph√¢n t√≠ch ho√†n t·∫•t!")
                
                with col2:
                    st.markdown('<div class="section-header">K·∫øt qu·∫£ ph√¢n t√≠ch</div>', unsafe_allow_html=True)
                    
                    # Th·ªëng k√™ t·ªïng quan
                    total = len(predictions)
                    normal_count = predictions.count(0)
                    tb_count = predictions.count(1)
                    
                    st.markdown(f"""
                    <div class="stats-container">
                        <div class="stat-card">
                            <div class="stat-value">{total}</div>
                            <div class="stat-label">T·ªïng s·ªë ·∫£nh</div>
                        </div>
                        <div class="stat-card normal">
                            <div class="stat-value">{normal_count}</div>
                            <div class="stat-label">B√¨nh th∆∞·ªùng</div>
                        </div>
                        <div class="stat-card tb">
                            <div class="stat-value">{tb_count}</div>
                            <div class="stat-label">Nghi ng·ªù lao ph·ªïi</div>
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # Hi·ªÉn th·ªã b·∫£ng k·∫øt qu·∫£ v·ªõi thi·∫øt k·∫ø ƒë·∫πp h∆°n
                    df = pd.DataFrame(results)
                    
                    # T·∫°o bi·ªÉu ƒë·ªì tr√≤n
                    if total > 0:
                        fig, ax = plt.subplots(figsize=(6, 4))
                        labels = ['B√¨nh th∆∞·ªùng', 'Lao ph·ªïi']
                        sizes = [normal_count, tb_count]
                        colors = ['#2ecc71', '#e74c3c']
                        explode = (0.1, 0.1)
                        
                        ax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%',
                              shadow=True, startangle=90)
                        ax.axis('equal')
                        ax.set_title('Ph√¢n b·ªë k·∫øt qu·∫£')
                        
                        st.pyplot(fig)
                    
                    # Hi·ªÉn th·ªã b·∫£ng k·∫øt qu·∫£
                    st.markdown("<div class='table-container'>", unsafe_allow_html=True)
                    st.dataframe(
                        df,
                        column_config={
                            "K·∫øt qu·∫£": st.column_config.TextColumn(
                                "K·∫øt qu·∫£",
                                help="K·∫øt qu·∫£ ph√¢n t√≠ch",
                                width="medium",
                            ),
                            "X√°c su·∫•t b√¨nh th∆∞·ªùng": st.column_config.TextColumn(
                                "X√°c su·∫•t b√¨nh th∆∞·ªùng",
                                width="medium",
                            ),
                            "X√°c su·∫•t lao ph·ªïi": st.column_config.TextColumn(
                                "X√°c su·∫•t lao ph·ªïi",
                                width="medium",
                            ),
                        },
                        use_container_width=True,
                        hide_index=True,
                    )
                    st.markdown("</div>", unsafe_allow_html=True)
                    
                    # Hi·ªÉn th·ªã ·∫£nh v·ªõi CAM cho c√°c tr∆∞·ªùng h·ª£p lao ph·ªïi
                    if tb_count > 0:
                        st.markdown('<div class="section-header">C√°c tr∆∞·ªùng h·ª£p nghi ng·ªù lao ph·ªïi</div>', unsafe_allow_html=True)
                        st.markdown("<div class='cam-grid'>", unsafe_allow_html=True)
                        
                        for idx, (img, cam_img, pred, filename) in enumerate(zip(images, cam_images, predictions, filenames)):
                            if pred == 1:
                                col_img, col_cam = st.columns(2)
                                with col_img:
                                    st.image(img, caption=f"G·ªëc: {filename}", use_container_width=True)
                                with col_cam:
                                    st.image(cam_img, caption=f"CAM: {filename}", use_container_width=True)
                        
                        st.markdown("</div>", unsafe_allow_html=True)
                    
                    # T·∫°o b√°o c√°o PDF t·ªïng h·ª£p cho t·∫•t c·∫£ c√°c ·∫£nh
                    st.markdown('<div class="section-header">B√°o c√°o PDF</div>', unsafe_allow_html=True)
                    
                    # T·∫°o c√°c n√∫t t·∫£i xu·ªëng cho t·ª´ng ·∫£nh
                    for idx, (filename, pdf_buffer) in enumerate(zip(filenames, pdf_buffers)):
                        col_pdf = st.columns([3, 1])
                        with col_pdf[0]:
                            result_text = "Lao ph·ªïi" if predictions[idx] == 1 else "B√¨nh th∆∞·ªùng"
                            result_class = "tb" if predictions[idx] == 1 else "normal"
                            st.markdown(f"""
                            <div class="pdf-item">
                                <div class="pdf-filename">{filename}</div>
                                <div class="pdf-result {result_class}">{result_text}</div>
                            </div>
                            """, unsafe_allow_html=True)
                        with col_pdf[1]:
                            st.download_button(
                                label="üìÑ T·∫£i PDF",
                                data=pdf_buffer,
                                file_name=f"bao_cao_xquang_{filename.split('.')[0]}.pdf",
                                mime="application/pdf",
                                key=f"download_pdf_{idx}",
                                use_container_width=True
                            )

with tabs[2]:
    st.title("Th√¥ng tin v·ªÅ ·ª©ng d·ª•ng")
    
    st.markdown("**·ª®ng d·ª•ng ph√°t hi·ªán lao ph·ªïi qua ·∫£nh X-quang** s·ª≠ d·ª•ng tr√≠ tu·ªá nh√¢n t·∫°o gi√∫p ph√°t hi·ªán s·ªõm c√°c d·∫•u hi·ªáu c·ªßa b·ªánh lao ph·ªïi th√¥ng qua ph√¢n t√≠ch ·∫£nh X-quang ng·ª±c.")
    
    # Ph·∫ßn C√°ch s·ª≠ d·ª•ng
    st.subheader("C√°ch s·ª≠ d·ª•ng")
    st.markdown("""
    1. Ch·ªçn tab "Ph√¢n t√≠ch m·ªôt ·∫£nh" ho·∫∑c "Ph√¢n t√≠ch nhi·ªÅu ·∫£nh" t√πy theo nhu c·∫ßu s·ª≠ d·ª•ng
    2. T·∫£i l√™n ·∫£nh X-quang ph·ªïi c·∫ßn ph√¢n t√≠ch (ƒë·ªãnh d·∫°ng JPG, JPEG ho·∫∑c PNG)
    3. Nh·∫•n n√∫t "Ph√¢n t√≠ch ·∫£nh" ƒë·ªÉ b·∫Øt ƒë·∫ßu qu√° tr√¨nh ph√¢n t√≠ch
    4. Xem k·∫øt qu·∫£ v√† t·∫£i xu·ªëng b√°o c√°o PDF n·∫øu c·∫ßn
    """)
    
    # Ph·∫ßn V·ªÅ m√¥ h√¨nh AI
    st.subheader("V·ªÅ m√¥ h√¨nh AI")
    st.info("""
    ·ª®ng d·ª•ng s·ª≠ d·ª•ng m√¥ h√¨nh h·ªçc s√¢u (Deep Learning) ƒë∆∞·ª£c hu·∫•n luy·ªán tr√™n t·∫≠p d·ªØ li·ªáu X-quang ph·ªïi l·ªõn ƒë·ªÉ ph√¢n bi·ªát gi·ªØa ·∫£nh X-quang b√¨nh th∆∞·ªùng v√† ·∫£nh c√≥ d·∫•u hi·ªáu lao ph·ªïi.
    
    C√¥ng ngh·ªá Class Activation Map (CAM) ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ tr·ª±c quan h√≥a v√πng nghi ng·ªù tr√™n ·∫£nh X-quang, gi√∫p b√°c sƒ© c√≥ th√™m th√¥ng tin trong qu√° tr√¨nh ch·∫©n ƒëo√°n.
    """)
    
    # Ph·∫ßn L∆∞u √Ω quan tr·ªçng v·ªõi m√†u n·ªïi b·∫≠t
    st.subheader("L∆∞u √Ω quan tr·ªçng")
    st.error("""
    **K·∫øt qu·∫£ t·ª´ ·ª©ng d·ª•ng n√†y ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o v√† h·ªó tr·ª£.**
    
    Kh√¥ng n√™n s·ª≠ d·ª•ng k·∫øt qu·∫£ t·ª´ ·ª©ng d·ª•ng n√†y ƒë·ªÉ thay th·∫ø ch·∫©n ƒëo√°n c·ªßa b√°c sƒ© chuy√™n khoa. Vui l√≤ng tham kh·∫£o √Ω ki·∫øn c·ªßa b√°c sƒ© ƒë·ªÉ c√≥ ch·∫©n ƒëo√°n ch√≠nh x√°c v√† ph∆∞∆°ng ph√°p ƒëi·ªÅu tr·ªã ph√π h·ª£p.
    """)
    
    # Ph·∫ßn ƒê·ªôi ng≈© ph√°t tri·ªÉn
    st.subheader("ƒê·ªôi ng≈© ph√°t tri·ªÉn")
    st.success("""
    ·ª®ng d·ª•ng ƒë∆∞·ª£c ph√°t tri·ªÉn nh∆∞ m·ªôt ph·∫ßn c·ªßa ƒë·ªì √°n chuy√™n ng√†nh v·ªÅ ·ª©ng d·ª•ng tr√≠ tu·ªá nh√¢n t·∫°o trong nh·∫≠n d·∫°ng v√† x·ª≠ l√Ω ·∫£nh y t·∫ø.
    
    ¬© 2025 - ƒê·ªì √°n chuy√™n ng√†nh 1 - ·ª®ng d·ª•ng tr√≠ tu·ªá nh√¢n t·∫°o trong nh·∫≠n d·∫°ng v√† x·ª≠ l√Ω ·∫£nh
    """)
