import streamlit as st
import pandas as pd
import os
import time
from datetime import datetime
from database import User, Patient, Analysis, get_db
from PIL import Image
import io
import uuid

def patient_management():
    st.set_page_config(
        page_title="Qu·∫£n l√Ω b·ªánh nh√¢n - H·ªá th·ªëng ph√°t hi·ªán lao ph·ªïi",
        layout="wide",
        initial_sidebar_state="expanded",
        page_icon="ü´Å"
    )
    
    # Import CSS t·ª´ file ri√™ng
    with open('style.css') as f:
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)
    
    # Ki·ªÉm tra ƒëƒÉng nh·∫≠p
    if "user_info" not in st.session_state:
        st.warning("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p trang n√†y")
        st.button("ƒêi ƒë·∫øn trang ƒëƒÉng nh·∫≠p", on_click=lambda: st.switch_page("auth.py"))
        return
    
    # Header
    st.markdown("""
    <div class="header">
        <div class="logo-container">
            <img src="https://cdn-icons-png.flaticon.com/512/2966/2966327.png" class="logo">
        </div>
        <div class="title-container">
            <h1>QU·∫¢N L√ù B·ªÜNH NH√ÇN</h1>
            <p class="subtitle">H·ªì s∆° v√† l·ªãch s·ª≠ ph√¢n t√≠ch</p>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar
    with st.sidebar:
        st.markdown(f"**Xin ch√†o, {st.session_state.user_info['full_name']}!**")
        st.markdown("---")
        
        menu = st.radio(
            "Ch·ªçn ch·ª©c nƒÉng:",
            ["Danh s√°ch b·ªánh nh√¢n", "Th√™m b·ªánh nh√¢n m·ªõi", "L·ªãch s·ª≠ ph√¢n t√≠ch"]
        )
        
        st.markdown("---")
        if st.button("Trang ch√≠nh"):
            st.switch_page("app.py")
        
        if st.button("ƒêƒÉng xu·∫•t"):
            del st.session_state.user_info
            st.rerun()
    
    # Main content
    if menu == "Danh s√°ch b·ªánh nh√¢n":
        list_patients()
    elif menu == "Th√™m b·ªánh nh√¢n m·ªõi":
        add_patient()
    else:
        analysis_history()

def list_patients():
    st.markdown('<div class="section-header">Danh s√°ch b·ªánh nh√¢n</div>', unsafe_allow_html=True)
    
    # T√¨m ki·∫øm
    search_term = st.text_input("T√¨m ki·∫øm b·ªánh nh√¢n (theo t√™n ho·∫∑c m√£):")
    
    # L·∫•y danh s√°ch b·ªánh nh√¢n t·ª´ database
    db = next(get_db())
    
    if st.session_state.user_info["is_admin"]:
        # Admin c√≥ th·ªÉ xem t·∫•t c·∫£ b·ªánh nh√¢n
        query = db.query(Patient)
    else:
        # B√°c sƒ© ch·ªâ xem b·ªánh nh√¢n c·ªßa m√¨nh
        query = db.query(Patient).filter(Patient.doctor_id == st.session_state.user_info["id"])
    
    # √Åp d·ª•ng t√¨m ki·∫øm n·∫øu c√≥
    if search_term:
        query = query.filter(
            (Patient.full_name.like(f"%{search_term}%")) | 
            (Patient.patient_code.like(f"%{search_term}%"))
        )
    
    patients = query.all()
    
    # Hi·ªÉn th·ªã danh s√°ch b·ªánh nh√¢n
    if patients:
        patients_data = []
        for patient in patients:
            doctor_name = db.query(User.full_name).filter(User.id == patient.doctor_id).first()
            doctor_name = doctor_name[0] if doctor_name else "Kh√¥ng c√≥"
            
            patients_data.append({
                "ID": patient.id,
                "M√£ b·ªánh nh√¢n": patient.patient_code,
                "H·ªç v√† t√™n": patient.full_name,
                "Tu·ªïi": patient.age,
                "Gi·ªõi t√≠nh": patient.gender,
                "ƒê·ªãa ch·ªâ": patient.address or "",
                "S·ªë ƒëi·ªán tho·∫°i": patient.phone or "",
                "B√°c sƒ© ph·ª• tr√°ch": doctor_name,
                "Ng√†y t·∫°o": patient.created_at.strftime("%d/%m/%Y")
            })
        
        df = pd.DataFrame(patients_data)
        st.dataframe(df, use_container_width=True)
        
        # Ch·ªçn b·ªánh nh√¢n ƒë·ªÉ xem chi ti·∫øt
        selected_patient = st.selectbox(
            "Ch·ªçn b·ªánh nh√¢n ƒë·ªÉ xem chi ti·∫øt:",
            options=[p.id for p in patients],
            format_func=lambda x: f"{next((p.patient_code for p in patients if p.id == x), '')} - {next((p.full_name for p in patients if p.id == x), '')}"
        )
        
        if selected_patient:
            view_patient_details(selected_patient)
    else:
        st.info("Kh√¥ng t√¨m th·∫•y b·ªánh nh√¢n n√†o")

def view_patient_details(patient_id):
    db = next(get_db())
    patient = db.query(Patient).filter(Patient.id == patient_id).first()
    
    if not patient:
        st.error("Kh√¥ng t√¨m th·∫•y th√¥ng tin b·ªánh nh√¢n")
        return
    
    st.markdown(f"### Chi ti·∫øt b·ªánh nh√¢n: {patient.full_name}")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown(f"**M√£ b·ªánh nh√¢n:** {patient.patient_code}")
        st.markdown(f"**H·ªç v√† t√™n:** {patient.full_name}")
        st.markdown(f"**Tu·ªïi:** {patient.age}")
        st.markdown(f"**Gi·ªõi t√≠nh:** {patient.gender}")
    
    with col2:
        st.markdown(f"**ƒê·ªãa ch·ªâ:** {patient.address or 'Kh√¥ng c√≥'}")
        st.markdown(f"**S·ªë ƒëi·ªán tho·∫°i:** {patient.phone or 'Kh√¥ng c√≥'}")
        doctor = db.query(User).filter(User.id == patient.doctor_id).first()
        st.markdown(f"**B√°c sƒ© ph·ª• tr√°ch:** {doctor.full_name if doctor else 'Kh√¥ng c√≥'}")
        st.markdown(f"**Ng√†y t·∫°o h·ªì s∆°:** {patient.created_at.strftime('%d/%m/%Y %H:%M')}")
    
    # Hi·ªÉn th·ªã l·ªãch s·ª≠ ph√¢n t√≠ch
    st.markdown("### L·ªãch s·ª≠ ph√¢n t√≠ch")
    
    analyses = db.query(Analysis).filter(Analysis.patient_id == patient.id).order_by(Analysis.created_at.desc()).all()
    
    if analyses:
        analyses_data = []
        for analysis in analyses:
            analyses_data.append({
                "ID": analysis.id,
                "Ng√†y ph√¢n t√≠ch": analysis.created_at.strftime("%d/%m/%Y %H:%M"),
                "K·∫øt qu·∫£": "Lao ph·ªïi" if analysis.prediction == 1 else "B√¨nh th∆∞·ªùng",
                "X√°c su·∫•t b√¨nh th∆∞·ªùng": f"{analysis.probability_normal:.2%}",
                "X√°c su·∫•t lao ph·ªïi": f"{analysis.probability_tb:.2%}",
                "Th·ªùi gian x·ª≠ l√Ω": f"{analysis.process_time:.2f}s",
                "Ghi ch√∫": analysis.notes or ""
            })
        
        st.dataframe(pd.DataFrame(analyses_data), use_container_width=True)
        
        # Ch·ªçn ph√¢n t√≠ch ƒë·ªÉ xem chi ti·∫øt
        selected_analysis = st.selectbox(
            "Ch·ªçn ph√¢n t√≠ch ƒë·ªÉ xem chi ti·∫øt:",
            options=[a.id for a in analyses],
            format_func=lambda x: f"Ph√¢n t√≠ch ng√†y {next((a.created_at.strftime('%d/%m/%Y %H:%M') for a in analyses if a.id == x), '')}"
        )
        
        if selected_analysis:
            analysis = next((a for a in analyses if a.id == selected_analysis), None)
            if analysis:
                st.markdown(f"### Chi ti·∫øt ph√¢n t√≠ch #{analysis.id}")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    if analysis.image_path and os.path.exists(analysis.image_path):
                        st.image(analysis.image_path, caption="·∫¢nh X-quang g·ªëc", use_column_width=True)
                    else:
                        st.info("Kh√¥ng t√¨m th·∫•y ·∫£nh g·ªëc")
                
                with col2:
                    if analysis.cam_image_path and os.path.exists(analysis.cam_image_path):
                        st.image(analysis.cam_image_path, caption="·∫¢nh ph√¢n t√≠ch (CAM)", use_column_width=True)
                    else:
                        st.info("Kh√¥ng t√¨m th·∫•y ·∫£nh ph√¢n t√≠ch")
                
                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                if analysis.prediction == 1:
                    st.markdown("""
                    <div class="result-card tb">
                        <div class="result-icon">‚ö†Ô∏è</div>
                        <div class="result-text">Ph√°t hi·ªán d·∫•u hi·ªáu lao ph·ªïi</div>
                    </div>
                    """, unsafe_allow_html=True)
                else:
                    st.markdown("""
                    <div class="result-card normal">
                        <div class="result-icon">‚úÖ</div>
                        <div class="result-text">Kh√¥ng ph√°t hi·ªán d·∫•u hi·ªáu lao ph·ªïi</div>
                    </div>
                    """, unsafe_allow_html=True)
                
                # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt
                st.markdown("#### Th√¥ng tin chi ti·∫øt")
                col1, col2 = st.columns(2)
                with col1:
                    st.markdown(f"**X√°c su·∫•t b√¨nh th∆∞·ªùng:** {analysis.probability_normal:.2%}")
                    st.markdown(f"**X√°c su·∫•t lao ph·ªïi:** {analysis.probability_tb:.2%}")
                with col2:
                    st.markdown(f"**Th·ªùi gian x·ª≠ l√Ω:** {analysis.process_time:.2f} gi√¢y")
                    doctor = db.query(User).filter(User.id == analysis.doctor_id).first()
                    st.markdown(f"**B√°c sƒ© ph√¢n t√≠ch:** {doctor.full_name if doctor else 'Kh√¥ng c√≥'}")
                
                # Ghi ch√∫
                if analysis.notes:
                    st.markdown(f"**Ghi ch√∫:** {analysis.notes}")
                
                # N√∫t x√≥a ph√¢n t√≠ch
                if st.button("X√≥a ph√¢n t√≠ch n√†y", key=f"delete_analysis_{analysis.id}"):
                    # X√≥a file ·∫£nh n·∫øu t·ªìn t·∫°i
                    if analysis.image_path and os.path.exists(analysis.image_path):
                        os.remove(analysis.image_path)
                    if analysis.cam_image_path and os.path.exists(analysis.cam_image_path):
                        os.remove(analysis.cam_image_path)
                    
                    # X√≥a t·ª´ database
                    db.delete(analysis)
                    db.commit()
                    st.success("ƒê√£ x√≥a ph√¢n t√≠ch")
                    time.sleep(1)
                    st.rerun()
    else:
        st.info("B·ªánh nh√¢n n√†y ch∆∞a c√≥ l·ªãch s·ª≠ ph√¢n t√≠ch")
    
    # N√∫t ch·ªânh s·ª≠a v√† x√≥a b·ªánh nh√¢n
    col1, col2 = st.columns(2)
    with col1:
        if st.button("Ch·ªânh s·ª≠a th√¥ng tin b·ªánh nh√¢n", key=f"edit_patient_{patient.id}"):
            st.session_state.edit_patient_id = patient.id
            st.session_state.edit_patient_data = {
                "patient_code": patient.patient_code,
                "full_name": patient.full_name,
                "age": patient.age,
                "gender": patient.gender,
                "address": patient.address,
                "phone": patient.phone
            }
            st.rerun()
    
    with col2:
        if st.button("X√≥a b·ªánh nh√¢n n√†y", key=f"delete_patient_{patient.id}"):
            # X√°c nh·∫≠n x√≥a
            confirm = st.checkbox("T√¥i x√°c nh·∫≠n mu·ªën x√≥a b·ªánh nh√¢n n√†y v√† t·∫•t c·∫£ d·ªØ li·ªáu li√™n quan", key=f"confirm_delete_{patient.id}")
            if confirm:
                # X√≥a c√°c ph√¢n t√≠ch li√™n quan
                analyses = db.query(Analysis).filter(Analysis.patient_id == patient.id).all()
                for analysis in analyses:
                    # X√≥a file ·∫£nh n·∫øu t·ªìn t·∫°i
                    if analysis.image_path and os.path.exists(analysis.image_path):
                        os.remove(analysis.image_path)
                    if analysis.cam_image_path and os.path.exists(analysis.cam_image_path):
                        os.remove(analysis.cam_image_path)
                    db.delete(analysis)
                
                # X√≥a b·ªánh nh√¢n
                db.delete(patient)
                db.commit()
                st.success(f"ƒê√£ x√≥a b·ªánh nh√¢n: {patient.full_name}")
                time.sleep(1)
                st.rerun()
    
    # Form ch·ªânh s·ª≠a b·ªánh nh√¢n
    if "edit_patient_id" in st.session_state and st.session_state.edit_patient_id == patient.id:
        st.markdown("### Ch·ªânh s·ª≠a th√¥ng tin b·ªánh nh√¢n")
        
        with st.form(key=f"edit_patient_form_{patient.id}"):
            patient_code = st.text_input("M√£ b·ªánh nh√¢n", value=st.session_state.edit_patient_data["patient_code"])
            full_name = st.text_input("H·ªç v√† t√™n", value=st.session_state.edit_patient_data["full_name"])
            age = st.number_input("Tu·ªïi", min_value=0, max_value=120, value=st.session_state.edit_patient_data["age"])
            gender = st.selectbox("Gi·ªõi t√≠nh", options=["Nam", "N·ªØ", "Kh√°c"], index=["Nam", "N·ªØ", "Kh√°c"].index(st.session_state.edit_patient_data["gender"]))
            address = st.text_input("ƒê·ªãa ch·ªâ", value=st.session_state.edit_patient_data["address"] or "")
            phone = st.text_input("S·ªë ƒëi·ªán tho·∫°i", value=st.session_state.edit_patient_data["phone"] or "")
            
            submit = st.form_submit_button("C·∫≠p nh·∫≠t th√¥ng tin")
            
            if submit:
                if not patient_code or not full_name or not age:
                    st.error("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc")
                    return
                
                # Ki·ªÉm tra m√£ b·ªánh nh√¢n ƒë√£ t·ªìn t·∫°i ch∆∞a (n·∫øu thay ƒë·ªïi)
                if patient_code != patient.patient_code:
                    existing_code = db.query(Patient).filter(Patient.patient_code == patient_code).first()
                    if existing_code:
                        st.error(f"M√£ b·ªánh nh√¢n '{patient_code}' ƒë√£ t·ªìn t·∫°i")
                        return
                
                # C·∫≠p nh·∫≠t th√¥ng tin
                patient.patient_code = patient_code
                patient.full_name = full_name
                patient.age = age
                patient.gender = gender
                patient.address = address
                patient.phone = phone
                
                db.commit()
                
                # X√≥a session state
                del st.session_state.edit_patient_id
                del st.session_state.edit_patient_data
                
                st.success("ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin b·ªánh nh√¢n")
                time.sleep(1)
                st.rerun()

def add_patient():
    st.markdown('<div class="section-header">Th√™m b·ªánh nh√¢n m·ªõi</div>', unsafe_allow_html=True)
    
    with st.form("add_patient_form"):
        st.subheader("Th√¥ng tin b·ªánh nh√¢n")
        
        # T·ª± ƒë·ªông t·∫°o m√£ b·ªánh nh√¢n
        today = datetime.now().strftime("%Y%m%d")
        db = next(get_db())
        count = db.query(Patient).count()
        suggested_code = f"BN{today}{count+1:03d}"
        
        patient_code = st.text_input("M√£ b·ªánh nh√¢n", value=suggested_code)
        full_name = st.text_input("H·ªç v√† t√™n")
        
        col1, col2 = st.columns(2)
        with col1:
            age = st.number_input("Tu·ªïi", min_value=0, max_value=120, value=30)
        with col2:
            gender = st.selectbox("Gi·ªõi t√≠nh", options=["Nam", "N·ªØ", "Kh√°c"])
        
        address = st.text_input("ƒê·ªãa ch·ªâ (kh√¥ng b·∫Øt bu·ªôc)")
        phone = st.text_input("S·ªë ƒëi·ªán tho·∫°i (kh√¥ng b·∫Øt bu·ªôc)")
        
        submit = st.form_submit_button("Th√™m b·ªánh nh√¢n")
        
        if submit:
            if not patient_code or not full_name or not age:
                st.error("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc")
                return
            
            # Ki·ªÉm tra m√£ b·ªánh nh√¢n ƒë√£ t·ªìn t·∫°i ch∆∞a
            db = next(get_db())
            existing_code = db.query(Patient).filter(Patient.patient_code == patient_code).first()
            if existing_code:
                st.error(f"M√£ b·ªánh nh√¢n '{patient_code}' ƒë√£ t·ªìn t·∫°i")
                return
            
            # T·∫°o b·ªánh nh√¢n m·ªõi
            new_patient = Patient(
                patient_code=patient_code,
                full_name=full_name,
                age=age,
                gender=gender,
                address=address if address else None,
                phone=phone if phone else None,
                doctor_id=st.session_state.user_info["id"]
            )
            
            db.add(new_patient)
            db.commit()
            
            st.success(f"ƒê√£ th√™m b·ªánh nh√¢n m·ªõi: {full_name}")
            
            # Th√™m n√∫t ƒë·ªÉ ph√¢n t√≠ch ngay cho b·ªánh nh√¢n n√†y
            if st.button("Ph√¢n t√≠ch X-quang cho b·ªánh nh√¢n n√†y"):
                st.session_state.selected_patient_id = new_patient.id
                st.switch_page("app.py")

def analysis_history():
    st.markdown('<div class="section-header">L·ªãch s·ª≠ ph√¢n t√≠ch</div>', unsafe_allow_html=True)
    
    # L·∫•y danh s√°ch ph√¢n t√≠ch t·ª´ database
    db = next(get_db())
    
    if st.session_state.user_info["is_admin"]:
        # Admin c√≥ th·ªÉ xem t·∫•t c·∫£ ph√¢n t√≠ch
        analyses = db.query(Analysis).order_by(Analysis.created_at.desc()).all()
    else:
        # B√°c sƒ© ch·ªâ xem ph√¢n t√≠ch c·ªßa m√¨nh
        analyses = db.query(Analysis).filter(Analysis.doctor_id == st.session_state.user_info["id"]).order_by(Analysis.created_at.desc()).all()
    
    if analyses:
        analyses_data = []
        for analysis in analyses:
            patient = db.query(Patient).filter(Patient.id == analysis.patient_id).first()
            patient_name = patient.full_name if patient else "Kh√¥ng c√≥"
            patient_code = patient.patient_code if patient else "Kh√¥ng c√≥"
            
            analyses_data.append({
                "ID": analysis.id,
                "Ng√†y ph√¢n t√≠ch": analysis.created_at.strftime("%d/%m/%Y %H:%M"),
                "M√£ b·ªánh nh√¢n": patient_code,
                "T√™n b·ªánh nh√¢n": patient_name,
                "K·∫øt qu·∫£": "Lao ph·ªïi" if analysis.prediction == 1 else "B√¨nh th∆∞·ªùng",
                "X√°c su·∫•t b√¨nh th∆∞·ªùng": f"{analysis.probability_normal:.2%}",
                "X√°c su·∫•t lao ph·ªïi": f"{analysis.probability_tb:.2%}"
            })
        
        df = pd.DataFrame(analyses_data)
        st.dataframe(df, use_container_width=True)
        
        # Th·ªëng k√™
        st.markdown("### Th·ªëng k√™ ph√¢n t√≠ch")
        
        normal_count = sum(1 for a in analyses if a.prediction == 0)
        tb_count = sum(1 for a in analyses if a.prediction == 1)
        total_count = len(analyses)
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown("""
            <div class="stat-card">
                <div class="stat-value">{}</div>
                <div class="stat-label">T·ªïng s·ªë ph√¢n t√≠ch</div>
            </div>
            """.format(total_count), unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            <div class="stat-card normal">
                <div class="stat-value">{}</div>
                <div class="stat-label">B√¨nh th∆∞·ªùng</div>
            </div>
            """.format(normal_count), unsafe_allow_html=True)
        
        with col3:
            st.markdown("""
            <div class="stat-card tb">
                <div class="stat-value">{}</div>
                <div class="stat-label">Lao ph·ªïi</div>
            </div>
            """.format(tb_count), unsafe_allow_html=True)
        
        # Bi·ªÉu ƒë·ªì t·ª∑ l·ªá
        data = pd.DataFrame({
            'K·∫øt qu·∫£': ['B√¨nh th∆∞·ªùng', 'Lao ph·ªïi'],
            'S·ªë l∆∞·ª£ng': [normal_count, tb_count]
        })
        
        st.bar_chart(data.set_index('K·∫øt qu·∫£'))
    else:
        st.info("Ch∆∞a c√≥ l·ªãch s·ª≠ ph√¢n t√≠ch")

if __name__ == "__main__":
    patient_management()

